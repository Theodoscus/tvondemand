/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tvondemand1;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Θεοδόσης
 */
public class Employee_View_clients extends javax.swing.JFrame implements DBConnection {

    /**
     * Creates new form Employee_View_clients
     */
    public Employee_View_clients() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox2 = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "First Name", "Last Name", "Address","District","Postal Code","Phone Number","City","Country"}));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jButton1.setText("Update films and series");

        jButton2.setText("Logout");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(15, 15, 15))
        );

        jTextField1.setText("User ID");

        jLabel1.setText("Insert user ID to perform changes:");

        jButton4.setText("Save");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField2.setText("Value");

        jButton5.setText("View all users info");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("View customer series rentals");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton8.setText("View customer film rentals");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("View 5 most rented films ");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("View 5 most rented series episodes");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField2)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(84, 84, 84))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10)))
                .addGap(37, 37, 37))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try
        {
            Statement stmt = connectdata();
            stmt.execute("delete from LOGIN_STATUS where login_status_id = 1");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e);
        }
        this.dispose();
        Welcome_Page ob = new Welcome_Page();
        ob.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
         model.setRowCount(0);
        try
            {
                
                
                Connection con=DBConnection.getConnection();
                Statement st=con.createStatement();
                
                ResultSet rs=st.executeQuery("select user.id,user.first_name,user.last_name,user.email,user.create_date,user.user_type,user.discount,address.address,address.district,address.postal_code,address.phone,city.city,country.country from user, address,city,country where user.user_type='Customer' AND user.address_id=address.id AND address.city_id=city.id AND city.country_id=country.id");
                ResultSetMetaData rsmd=rs.getMetaData();
                
                
                int cols=rsmd.getColumnCount();
                String[] colName= new String[cols];
                for (int i=0;i<cols;i++)
                    colName[i]=rsmd.getColumnName(i+1);
                model.setColumnIdentifiers(colName);
                String no,f_name,l_name,email,date,type,discount,address,district,postal,phone,city,country;
                while(rs.next()){
                    no=rs.getString(1);
                    f_name=rs.getString(2);
                    l_name=rs.getString(3);
                    email=rs.getString(4);
                    date=rs.getString(5);
                    type=rs.getString(6);
                    discount=rs.getString(7);
                    address=rs.getString(8);
                    district=rs.getString(9);
                    postal=rs.getString(10);
                    phone=rs.getString(11);
                    city=rs.getString(12);
                    country=rs.getString(13);
                    String[] row={no,f_name,l_name,email,date,type,discount,address,district,postal,phone,city,country};
                    model.addRow(row);
                }
                st.close();
                con.close();
                    
                
            }
            
            
        catch(Exception e)
            {
                JOptionPane.showMessageDialog(this,e);
            }
     
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try
            {
                Connection con=DBConnection.getConnection();
                Statement st=con.createStatement();
                int user_id=Integer.valueOf(jTextField1.getText());
                ResultSet rs=st.executeQuery("select user_type from user where id='"+user_id+"'");
                rs.next();
                String user_type=rs.getString(1);
                String new_value=jTextField2.getText();
                
                
                String column=jComboBox2.getSelectedItem().toString();
                if(user_type.equals("Customer")){
                if(column.equals("First Name")){
                    Statement stmt = connectdata();
                    stmt.executeUpdate("update user set first_name='"+new_value+"' where id='"+user_id+"'");
                    JOptionPane.showMessageDialog(this,"You have succesfully changed your first name to "+new_value+"!");
                }else if(column.equals("Last Name")){
                    Statement stmt = connectdata();
                    stmt.executeUpdate("update user set last_name='"+new_value+"' where id='"+user_id+"'");
                    JOptionPane.showMessageDialog(this,"You have succesfully changed your last name to "+new_value+"!");
                }else if(column.equals("Address")){
                    rs=st.executeQuery("Select address_id from user where id='"+user_id+"'");
                    rs.next();
                    int address_id=Integer.valueOf(rs.getString(1));
                    Statement stmt = connectdata();
                    stmt.executeUpdate("update address set address='"+new_value+"' where id='"+address_id+"'");
                    JOptionPane.showMessageDialog(this,"You have succesfully changed your address to "+new_value+"!");
                }else if(column.equals("District")){
                    rs=st.executeQuery("Select address_id from user where id='"+user_id+"'");
                    rs.next();
                    int address_id=Integer.valueOf(rs.getString(1));
                    Statement stmt = connectdata();
                    stmt.executeUpdate("update address set district='"+new_value+"' where id='"+address_id+"'");
                    JOptionPane.showMessageDialog(this,"You have succesfully changed your district to "+new_value+"!");
                }else if(column.equals("Postal Code")){
                    rs=st.executeQuery("Select address_id from user where id='"+user_id+"'");
                    rs.next();
                    int address_id=Integer.valueOf(rs.getString(1));
                    Statement stmt = connectdata();
                    stmt.executeUpdate("update address set postal_code='"+new_value+"' where id='"+address_id+"'");
                    JOptionPane.showMessageDialog(this,"You have succesfully changed your postal code to "+new_value+"!");
                }else if(column.equals("Phone Number")){
                    rs=st.executeQuery("Select address_id from user where id='"+user_id+"'");
                    rs.next();
                    int address_id=Integer.valueOf(rs.getString(1));
                    Statement stmt = connectdata();
                    stmt.executeUpdate("update address set phone='"+new_value+"' where id='"+address_id+"'");
                    JOptionPane.showMessageDialog(this,"You have succesfully changed your phone number to "+new_value+"!");
                }else if(column.equals("City")){
                    rs=st.executeQuery("Select address_id from user where id='"+user_id+"'");
                    rs.next();
                    int address_id=Integer.valueOf(rs.getString(1));
                    rs=st.executeQuery("Select city_id from address where id='"+address_id+"'");
                    rs.next();
                    int city_id=Integer.valueOf(rs.getString(1));
                    Statement stmt = connectdata();
                    stmt.executeUpdate("update city set city='"+new_value+"' where id='"+city_id+"'");
                    JOptionPane.showMessageDialog(this,"You have succesfully changed your city to "+new_value+"!");
                }else if(column.equals("Country")){
                    rs=st.executeQuery("Select address_id from user where id='"+user_id+"'");
                    rs.next();
                    int address_id=Integer.valueOf(rs.getString(1));
                    rs=st.executeQuery("Select city_id from address where id='"+address_id+"'");
                    rs.next();
                    int city_id=Integer.valueOf(rs.getString(1));
                    rs=st.executeQuery("Select country_id from city where id='"+city_id+"'");
                    rs.next();
                    int country_id=Integer.valueOf(rs.getString(1));
                    Statement stmt = connectdata();
                    stmt.executeUpdate("update country set country='"+new_value+"' where id='"+country_id+"'");
                    JOptionPane.showMessageDialog(this,"You have succesfully changed your country to "+new_value+"!");
                }
                }else{
                    JOptionPane.showMessageDialog(this,"The user you've selected is not editable or does not exist.");
                }
                
                
                
                    
                
            }
            
            
        catch(Exception e)
            {
                JOptionPane.showMessageDialog(this,e);
            }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
         model.setRowCount(0);
        try
            {
                int user_id=Integer.valueOf(jTextField1.getText());
                Statement stmt = connectdata();
                ResultSet rs =   stmt.executeQuery("Select plan_type_id from plan where user_id='"+user_id+"'");
                rs.next();
                int user_plan = Integer.valueOf(rs.getString(1));
                if (user_plan==2||user_plan==3){
                Connection con=DBConnection.getConnection();
                Statement st=con.createStatement();
                
                
                rs=st.executeQuery("Select series_payment.id, series_payment.total_amount, series_payment.payment_date, episode.title from series_payment,series_rental, series_inventory, episode where series_payment.user_id='"+user_id+"' AND series_payment.series_rental_id=series_rental.id AND series_rental.series_inventory_id=series_inventory.id AND series_inventory.episode_id=episode.id;");
                ResultSetMetaData rsmd=rs.getMetaData();
                
                
                int cols=rsmd.getColumnCount();
                String[] colName= new String[cols];
                for (int i=0;i<cols;i++)
                    colName[i]=rsmd.getColumnName(i+1);
                model.setColumnIdentifiers(colName);
                String no,pay,date,tit;
                while(rs.next()){
                    no=rs.getString(1);
                    pay=rs.getString(2);
                    date=rs.getString(3);
                    tit=rs.getString(4);
                    String[] row={no,pay,date,tit};
                    model.addRow(row);
                }
                st.close();
                con.close();
                    
                
            }else if(user_plan==1){
                JOptionPane.showMessageDialog(this,"Selected user's plan type does not include series!");
            }
            }
            
        catch(Exception e)
            {
                JOptionPane.showMessageDialog(this,e);
            }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
         DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
         model.setRowCount(0);
        try
            {
                int user_id=Integer.valueOf(jTextField1.getText());
                Statement stmt = connectdata();
                ResultSet rs =   stmt.executeQuery("Select plan_type_id from plan where user_id='"+user_id+"'");
                rs.next();
                int user_plan = Integer.valueOf(rs.getString(1));
                if (user_plan==1||user_plan==3){
                Connection con=DBConnection.getConnection();
                Statement st=con.createStatement();
                
                rs=st.executeQuery("Select film_payment.id, film_payment.total_amount, film_payment.payment_date, film.title from film_payment,film_rental, film_inventory, film where film_payment.user_id='"+user_id+"' AND film_payment.film_rental_id=film_rental.id AND film_rental.film_inventory_id=film_inventory.id AND film_inventory.film_id=film.id;");
                ResultSetMetaData rsmd=rs.getMetaData();
                
                
                int cols=rsmd.getColumnCount();
                String[] colName= new String[cols];
                for (int i=0;i<cols;i++)
                    colName[i]=rsmd.getColumnName(i+1);
                model.setColumnIdentifiers(colName);
                String no,pay,date,tit;
                while(rs.next()){
                    no=rs.getString(1);
                    pay=rs.getString(2);
                    date=rs.getString(3);
                    tit=rs.getString(4);
                    String[] row={no,pay,date,tit};
                    model.addRow(row);
                }
                st.close();
                con.close();
                    
                
            }else if(user_plan==2){
                JOptionPane.showMessageDialog(this,"Selected user's plan type does not include films!");
            }
            }
            
        catch(Exception e)
            {
                JOptionPane.showMessageDialog(this,e);
            }
     
    
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
         DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
         model.setRowCount(0);
        try
            {
                
                Connection con=DBConnection.getConnection();
                Statement st=con.createStatement();
                
                ResultSet rs=st.executeQuery("call most_rented('m',5,NOW()- INTERVAL 1 MONTH, NOW())");
                ResultSetMetaData rsmd=rs.getMetaData();
                
                
                int cols=rsmd.getColumnCount();
                String[] colName= new String[cols];
                for (int i=0;i<cols;i++)
                    colName[i]=rsmd.getColumnName(i+1);
                model.setColumnIdentifiers(colName);
                String film_id,tit,times;
                while(rs.next()){
                    film_id=rs.getString(1);
                    tit=rs.getString(2);
                    times=rs.getString(3);
                    
                    String[] row={film_id,tit,times};
                    model.addRow(row);
                }
                st.close();
                con.close();
                    
                
            
            }
            
        catch(Exception e)
            {
                JOptionPane.showMessageDialog(this,e);
            }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
         model.setRowCount(0);
        try
            {
                
                Connection con=DBConnection.getConnection();
                Statement st=con.createStatement();
                
                ResultSet rs=st.executeQuery("call most_rented('s',5,NOW()- INTERVAL 1 MONTH, NOW())");
                ResultSetMetaData rsmd=rs.getMetaData();
                
                
                int cols=rsmd.getColumnCount();
                String[] colName= new String[cols];
                for (int i=0;i<cols;i++)
                    colName[i]=rsmd.getColumnName(i+1);
                model.setColumnIdentifiers(colName);
                String film_id,tit,times;
                while(rs.next()){
                    film_id=rs.getString(1);
                    tit=rs.getString(2);
                    times=rs.getString(3);
                    
                    String[] row={film_id,tit,times};
                    model.addRow(row);
                }
                st.close();
                con.close();
                    
                
            
            }
            
        catch(Exception e)
            {
                JOptionPane.showMessageDialog(this,e);
            }
    }//GEN-LAST:event_jButton10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Employee_View_clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Employee_View_clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Employee_View_clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Employee_View_clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Employee_View_clients().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
